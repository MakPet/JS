alert('Hello, World!');
    /*
        Итак, инструкции — синтаксические функции и команды, которые выполняют действия. 
        Отделять их нужно точкой с запятой.
        При переходе на новую строку их можно не ставить, но хорошим тоном считается их 
        ставить даже тогда. Обычно каждая инструкция на
        новой строке. 

        alert('Hi, mom');

    */

/*
    'use strict' для перехода в строгий режим или же современный, изменит поведение 
    некоторых функций. Рекомендуектся всегла начинать с
    этого свои скрипты. Некоторые функции языка автоматически включают строгий режим. 
*/

/*
    Итак, переменные должны хранить в себе какие-то значения. 

    Пример: 

    let Hello = 'Hi';
    alert('Hi');

    var — устаревший способ обновления переменной, подробднее о отличиях поговорим позже 

    const — переменная, значение которой не может изменяться, 
    верхний регистр если значение жесткое, известно заранее и не меняется и разный
    регистр если вычисляется. 

    Разрешенные символы: _ $ abcABC, некоторые слова зарезервированы

    Осмысленные имена переменных!
*/

let name = 'Джон';
let admin = name;
alert(admin);

let currentUserName = 'Пользователь';
let ourPlanetName = 'Earth';

/*
    Итак, какие же типы данных у нас могут хранится в переменных?

    1. number

    let myNumber = 12345; Без кавычек

    Infinity - бесконечность, больше любого числа. А еще -Infinity, бесконечность, меньше любого числа.
    NaN - вычислительная ошибка.

    BigInt - числах не может быть больше 16 цифр, но если надо, то ставим b в конце, целыми числами, важно.

    2. строка string, заключена может быть в три типа кавычек.

    Двойные и одинарные — одно и то же. `` Обратные же интереснее. В них уже можно встраивать значения
    с помощью ${…}.

    Например

    let userName = `Имя`;
    alert(`Привет, ${userName}`);

    3. boolean, логические. Только true или false

    let iAmOldMan = false;

    let itIsTrue = 4 > 1;
    alert(itIsTrue);

    4. null

    Пусто, ничего, неизвестно.

    let name = null;
    alert(name);

    5. undefined

    Значение не было присвоено.

    let x;
    alert(x);

    6. object

    Хранит в себе более сложные объекты или же коллекции данных.

    symbol используют для создания уникальных id объектов.

    7. typeof возвращает тип аргумента

    Работает с кавычками и без.

    typeof Math; объект, который представляет математические операции и константы

    typeof null; объект, но это не верно

    typeof alert; функция, но в JS нет такого типа, они относятся к объектам. Но на практике это удобно.

*/

/*
    Иногда нужно преобразовать данные хотя чаще всего функции и операторы сами приводят значения к
    нужному типу.

    1. Строковое преобразование

    alert(awfa); string

    let myName = String(true);
    alert(typeof myName); тоже string

    2. Численное преобразование в матем функциях и выражениях, например, когда операция деления применяется
    не к числу. Но с + такое уже вроде не пройдет

    alert('6' + '2')

    let num = Number('123');
    alert(typeof num);

    Полезно, когда тебе с формы что-то приходит текстом

    Если строка не может быть приведена к числу, то нам вернут значение NaN(не удалось)

    let num = Number('undefined');
    alert(num); NaN

    let num = Number('null');
    alert(num); 0

    let num = Number('true/false');
    alert(num); 1/0

    let num = Number('');
    alert(num); Если пусто, то 0, пробелы игнор, если не цифры, то не удалось

    3. Логическое преобразование

    Может быть в логических операторах, но так же можно задать явно Boolean(true)

    Пустые значения: 0, NaN, null, undefined, становятся false.

    Но строка с пробелом у нас уже будет true, с нулем так же true, но строка. Если строка пустая, то false,
    если полная, то true.

    "" + 1 + 0 //1 Неправильно, олжно быть '10' "" считает за пустую сроку и тупо делает "1",
     а дальше дело техники

    "" - 1 + 0 //-1 Правильно. Отнимание арпиори с числами, поэтому "0" - 1, а дальше нормально
    true + false //1 Правильно. true это 1, false 0
    6 / "3" //2 Правильно. Деление априори к цифрам
    "2" * "3" //6 Правильно. Тоже, что и с делением
    4 + 5 + "px" //"9px" Правильно. Сначала сложение, поэтому 9, затем + строка
    "$" + 4 + 5 //$9 Неправильно. Сначала у нас строка складывается с числом, поэтому получается '$4', а
    заем уже и "$45"
    "4" - 2 //2 Правильно, строка 4 преобразовывается в число.
    "4px" - 2 // NaN Правильно, при отнимании строка преобразовывается читается как число, но там не
    только цифра
    7 / 0 //0   Неправильно. На ноль можно делить бесконечное кол-во раз. Будет infinity
    "  -9  " + 5 //-95 Неправильно. Добаляем строку, поэтому пробелы сохраняются   "-9  5"
    "  -9  " - 5 //-14 Правильно, математическое действие, пробелы у -9 игнорируются, получается -14
    null + 1 //1 Правильно, null после преобразования становится нулем
    undefined + 1 //NaN Правильно. undefined после преобразования в число выбьет NaN
    " \t \n" - 2 //NAn Неправильно \t \n какие-то спец символы. Поэтому будет 0 - 2 = -2. Эти символы
    обрежутся как пробелы и останется пустая строка
*/

/*
    Операторы в JS. Нам знакомы + - * и тд со школы. Что в них не входит?

*/