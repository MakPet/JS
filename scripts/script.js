alert('Hello, World!');
    /*
        Итак, инструкции — синтаксические функции и команды, которые выполняют действия. 
        Отделять их нужно точкой с запятой.
        При переходе на новую строку их можно не ставить, но хорошим тоном считается их 
        ставить даже тогда. Обычно каждая инструкция на
        новой строке. 

        alert('Hi, mom');

    */

/*
    'use strict' для перехода в строгий режим или же современный, изменит поведение 
    некоторых функций. Рекомендуектся всегла начинать с
    этого свои скрипты. Некоторые функции языка автоматически включают строгий режим. 
*/

/*
    Итак, переменные должны хранить в себе какие-то значения. 

    Пример: 

    let Hello = 'Hi';
    alert('Hi');

    var — устаревший способ обновления переменной, подробднее о отличиях поговорим позже 

    const — переменная, значение которой не может изменяться, 
    верхний регистр если значение жесткое, известно заранее и не меняется и разный
    регистр если вычисляется. 

    Разрешенные символы: _ $ abcABC, некоторые слова зарезервированы

    Осмысленные имена переменных!
*/

let name = 'Джон';
let admin = name;
alert(admin);

let currentUserName = 'Пользователь';
let ourPlanetName = 'Earth';

/*
    Итак, какие же типы данных у нас могут хранится в переменных?

    1.Число

    let myNumber = 12345; Без кавычек

    Infinity - бесконечность, больше любого числа. А еще -Infinity, бесконечность, меньше любого числа.
    NaN - вычислительная ошибка.

    BigInt - числах не может быть больше 16 цифр, но если надо, то ставим b в конце, целыми числами, важно.

    2. Строка, заключена может быть в три типа кавычек.

    Двойные и одинарные — одно и то же. `` Обратные же интереснее. В них уже можно встраивать значения
    с помощью ${…}.

    Например

    let userName = `Имя`;
    alert(`Привет, ${userName}`);

    3. Булевые, логические. Только true или false

    let iAmOldMan = false;

    let itIsTrue = 4 > 1;
    alert(itIsTrue);

    4. null

    Пусто, ничего, неизвестно.

    let name = null;
    alert(name);

    5. undefined

    Значение не было присвоено.

    let x;
    alert(x);

    6. object

    Хранит в себе более сложные объекты или же коллекции данных.

    symbol используют для создания уникальных id бъектов.

    7. typeof возвращает тип аргумента

    Работает с кавычками и без.
*/